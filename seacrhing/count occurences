def firstOcc(arr,x):
    low = 0
    high = len(arr) - 1
    mid = (low+high)//2
    while low <=high:
       
        if x >arr[mid]:
            low = mid + 1
        elif x < arr[mid]: 
            high = mid - 1
        else:
            if mid == 0 or arr[mid-1]!=arr[mid]:
                return mid
            else:
                high = mid - 1
     return -1
 #time - O(log n)    
def lastOcc(arr,x):
     low = 0
    high = len(arr) - 1
    mid = (low+high)//2
    while low <=high:
       
        if x >arr[mid]:
            low = mid + 1
        elif x < arr[mid]:
            high = mid - 1
        else:
            if mid == n -1 or arr[mid]!=arr[mid+1]:
                return mid
            else:
                low = mid + 1
     return -1
     
#time - O(log n) 
     
     
     
def countOcc(arr,x):
    first = firstOcc(arr,x) #time - O(log n)
     
    if first == -1:
        return 0
    else:
        return lastOcc(arr,n)-first+1     #time - O(log n)
        
        
  #total time - O(log n) + O(log n) = O(log n)     
        
   '''     
   ex:
   x = 20,so we have to count occurences of 20
   arr = [10,20,20,20,30,30]
           0  1  2  3  4  5
              *  *  *
   first = 1
   lastOcc(arr,n) returns value 3
   lastOcc(arr,n)-first+1 = 3-1+1 = 3
   20 occures 3 times
        
   '''
