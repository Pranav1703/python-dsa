#recusive approach
def searchFirst(arr,x,low,high):
    if low > high:
        return -1
    mid = (low+high)//2
   
    if x > arr[mid]:
        retrun searchFirst(arr,x,mid + 1,high)
    elif x < ar[mid]:
        return searchFirst(arr,x,low,mid - 1)
    else:
        if mid == 0 or arr[mid-1]!=arr[mid]:
            return mid
        else:
        return searchFirst(arr,x,low,mid - 1)
        
        
        
    #O(log N) aux space

       
# iterative approach

def searchFirst(arr,n,x):
    low = 0
    high = n - 1
    
    while low <=high:
        mid = (low+high)//2
        if x >arr[mid]:
            low = mid + 1
        elif x < arr[mid]:
            high = mid - 1
        else:
            if mid == 0 or arr[mid-1]!=arr[mid]:
                return mid
            else:
                high = mid - 1
     return -1
     
     #O(1) aux space
     #O(log N) time complexity for both recursive and iterative approach
  
            
            
            
            
