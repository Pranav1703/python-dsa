def firstOcc(arr):
    low = 0
    high = len(arr) - 1
    x = 1
    while low <=high:
        mid = (low+high)//2
        if x >arr[mid]:
            low = mid + 1
        elif x < arr[mid]: 
            high = mid - 1
        else:
            if mid == 0 or arr[mid-1]!=arr[mid]:
                return mid
            else:
                high = mid - 1
     return -1
 #time - O(log n)    
def lastOcc(arr):
     low = 0
    high = len(arr) - 1
    x =1
    while low <=high:
        mid = (low+high)//2
        if x >arr[mid]:
            low = mid + 1
        elif x < arr[mid]:
            high = mid - 1
        else:
            if mid == n -1 or arr[mid]!=arr[mid+1]:
                return mid
            else:
                low = mid + 1
     return -1
     
#time - O(log n) 
     
     
     
def countOccOf_1(arr):
    first = firstOcc(arr) #time - O(log n)
    n = len(arr) 
    if first == -1:
        return 0
    else:
        return n-first    #time - O(log n)
        
        
  #total time - O(log n) + O(log n) = O(log n)    
  
  
  
  
  
