class Node:
    def __init__(self, k):
        self.key = k
        self.next = None
        self.prev = None


class MyDeque:
    def __init__(self, c):
        self.front = None
        self.rear = None
        self.sz = 0

    def size(self):
        return self.sz

    def isEmpty(self):
        return self.sz == 0

    def insertfront(self,x):
        temp = Node(x)
        if self.front == None: #checking if L.L is empty
            self.rear = temp
        else:
            self.front.prev = temp #adding newnode at the front updating front.prev to temp
            temp.next = self.front #updating next pointer to old front 
        self.front = temp          #
        self.sz +=1
        
    def insertRear(self, x):
        temp = Node(x)
        if self.rear == None:  #this means linked list is empty
            self.front = temp
        else:
            self.rear.next = temp  #adding newnode at the rear
            temp.prev = self.rear   #updating prev of newnode to old rear
        self.rear = temp            #updating newnode as rear
        self.sz = self.sz + 1

    def deletfront(self):
        if self.front == None:
            return None
        else:
            res = self.front.key    #storing front data
            self.front = self.front.next  #updating front 
            if self.front == None:   #checking is there is one element
                self.rear = None     #updating rear
            else:
                self.front.prev = None   #updating new front node's prev pointer to None
            self.sz = self.sz - 1    

            return res
    def deleterear(self):
        if self.rear == None:
            return None
        else:
            res = self.rear.key   #storing rear data
            self.rear =self.rear.prev #updating rear
            if self.rear == None:  #checking if new rear is none (there is no element after deleting ) 
                self.front == None  
            else:
                self.rear.next = None  #updating new rear node next to None
            self.sz-=1
            return res
    def getFront(self):
        if self.front:
            return self.front.key
        

    def getRear(self):
        if self.rear:
            return self.rear.key
#main

dq = MyDeque(3)

print(dq.isEmpty())
dq.insertRear(10)
print(dq.getFront(),dq.getRear())
dq.insertRear(20)
print(dq.getFront(),dq.getRear())
dq.insertRear(30)
print(dq.getFront())
dq.insertfront(69)
print(dq.getFront(), dq.getRear())
dq.deletfront()
print(dq.getFront(), dq.getRear())


output:
True
10 10
10 20
10
69 30
10 30
