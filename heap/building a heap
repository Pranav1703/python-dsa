class myMinHeap:
    def __init__(self, l=[]):
        self.arr = l
        i = (len(l) - 2) // 2   #this expression finds the index of bottom most,right most internal node in the binary tree representation of heap

        while i >= 0:
            self.minHeapify(i) 
            i = i - 1            #since we are traversing from the bottom we will decrement the value by 1



    def minHeapify(self, i):
        arr = self.arr
        lt = self.lChild(i)
        rt = self.rChild(i)

        smallest = i
        n = len(arr)

        if lt < n and arr[lt] < arr[smallest]:
            smallest = lt
        if rt < n and arr[rt] < arr[smallest]:
            smallest = rt

        if smallest != i:
            arr[smallest], arr[i] = arr[i], arr[smallest]
            self.minHeapify(smallest)
