#heap sort iterative approach
# Python program for implementation of heap Sort



def maxheapify(arr, n, i):
	largest = i # Initialize largest as root
	l = 2 * i + 1 #returns index of left child
	r = 2 * i + 2 #returns index of right child
    
    if l < n and arr[i] < arr[l]:
		largest = l
    
    if r < n and arr[largest] < arr[r]:
		largest = r
    
    if largest != i:
		(arr[i], arr[largest]) = (arr[largest], arr[i]) # swap


		maxheapify(arr, n, largest)



def heapSort(arr):
	n = len(arr)


	for i in range(n // 2 - 1, -1, -1):
		maxheapify(arr, n, i)


	for i in range(n - 1, 0, -1):
		(arr[i], arr[0]) = (arr[0], arr[i]) # swap
		maxheapify(arr, i, 0)


# Driver code to test above

arr = [12, 11, 13, 5, 6, 7, ]
heapSort(arr)
n = len(arr)
print('Sorted array is')
for i in range(n):
	print(arr[i])
    

#recursive approach
def buildheap(arr):
    n=len(arr)
    for i in range((n-2)//2,-1,-1):
        maxheapify(arr,n,i)

def maxheapify(arr, n, i):
	largest = i # Initialize largest as root
	l = 2 * i + 1 #returns index of left child
	r = 2 * i + 2 #returns index of right child
    
    if l < n and arr[i] < arr[l]:
		largest = l
    
    if r < n and arr[largest] < arr[r]:
		largest = r
    
    if largest != i:
		(arr[i], arr[largest]) = (arr[largest], arr[i]) # swap


		heapify(arr, n, largest)
    
    

def heapsort(arr):
    n=len(arr)
    buildheap(arr)
    for i in range(n-1,0,-1):
        arr[i],arr[0]=arr[0],arr[i]
        maxheapify(arr,i,0)
        
        
        
        
