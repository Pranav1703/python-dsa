
#naive approch,time-O(n^2)
def inversions(arr):
    n = len(arr)
    count = 0
    for i in range(n-1):
        for j in range(i+1,n):
            if arr[i]>arr[j]:
                count+=1
    return count

#

def countInversions(arr,l,r):
    res = 0
    
    if l < r:
        m = (l+r)//2
        res += countInversions(arr,l,m)
        res += countInversions(arr,m+1,r)
        res += countMerge(arr,l,m,r)
    return res
    
  

def countMerge(arr,l,m,r):
    left = arr[0:m+1]
    right = arr[m+1:r+1]
    res,i,j,k=0,0,0,l
    
    while i < len(left) and j < len(right):
        if arr[i] <=arr[j]:
            arr[k] = arr[i]:
            i+=1
        else:
            arr[k] = arr[j]
            j+=1
            res += len(left) - i
        k+=1
    while i < len(left):
        arr[k] = arr[i]
        i+=1
        k+=1
    while j < len(right):   
        arr[k] = arr[j]
        j+=1
        k+=1
    return res            
        
    
        
