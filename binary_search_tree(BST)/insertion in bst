class Node:
    def __init__(self, key):
        self.left = None
        self.key = key
        self.right = None

#iterative approach
def insert(root, key):
    parent = None
    curr = root

    while curr != None:
        parent = curr

        if curr.key == key:
            return root
        elif curr.key > key:
            curr = curr.left
        else:
            curr = curr.right

    if parent == None:
        return Node(key)

    if parent.key > key:
        parent.left = Node(key)
    else:
        parent.right = Node(key)

    return root
example and dry run: 

                                     10
                                    /  \                              
                                   5    15
                                       /  \
                                     12    18
                                 key = 20
   
   initially: curr = 10,parent = None
   1st iteration:parent = 10,curr = 15
   2nd iteration:parent = 15,curr = 18
   3rd iteration:parent = 18,curr = None
   loop breaks
   since parent.key<key:
          parent.right = key
      


#recursive approach

def insert(root,key):
    if root == None:
        return Node(key)
    elif root.key == key:
        return root
    elif root.key>key;
        root.left = insert(root.left,key)
    elif root.key<key:
        root.right = insert(root.right,key)
    return root
