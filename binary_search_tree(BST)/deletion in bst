class Node:
    def __init__(self, key):
        self.left = None
        self.key = key
        self.right = None



def getSucc(curr, key):
    while curr.left != None:
        curr = curr.left                     #this fuction returns the left most node in the tree
  
    return curr.key                          #getSucc function returns inorder successor of the root node.inorder successor is the next node which comes next in inorder traversal 
                                               or the closest next largest node w.r.t current node


def deleteNode(root, key):
    if root == None:
        return

    if root.key > key:
        root.left = deleteNode(root.left, key)  #calling for left subtree

    if root.key < key:
        root.right = deleteNode(root.right, key) #calling for right subtree

    else:
        if root.left == None:
            return root.right     #root.right maybe be none or hae a value.In either of these cases we return right value
        elif root.right == None:
            return root.left      #root.left maybe be none or hae a value.In either of these cases we return left value 
        else:                   #in this case both left and right node of root node are not none
            succ = getSucc(root.right, key)  #calling the function to find the left most node of the right subtree.the node may not be a leaf node
            root.key = succ          #replacing the root node to be deleted with its inorder successor
            root.right = deleteNode(root.right, succ)   #deleting the duplicate of the  successor in the tree

    return root
    
    
    
