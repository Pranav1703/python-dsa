from collections import deque


class Node:
    def __init__(self, k):
        self.left = None
        self.right = None
        self.key = k


def printLevelOrder(root):
    if root is None:
        return

    q = deque()
    q.append(root)

    while len(q) > 0:
        node = q.popleft()
        print(node.key)

        if node.left is not None:
            q.append(node.left)

        if node.right is not None:
            q.append(node.right)


# Driver code 
root = Node(10)                                                                       10
root.left = Node(20)                                                                 /  \
root.right = Node(30)                                                              20    30
root.left.left = Node(40)                                                         /     /  \
root.right.left = Node(50)                                                       40    50   60
root.right.right = Node(60)                                                           /  \
root.right.left.left = Node(70)                                                      70   80
root.right.left.right = Node(80)

printLevelOrder(root)
#dry run:
q={10}
1st iteration: print(10) q={20,30}
2: print(20)  q={30,40}
3: print(30)  q={40,50,60}
4: print(40)  q={50,60}
5:print(50)   q={60,70,80}
6:print(60)   q={70,80}
7:print(70)   q={80}
8:print(80)   q={}


